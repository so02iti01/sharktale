{"meta":{"title":"Sharktale","subtitle":"","description":"","author":null,"url":"http://blog.sharktale.xyz","root":"/"},"pages":[{"title":"","date":"2022-06-21T13:04:17.674Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"404.html","permalink":"http://blog.sharktale.xyz/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2022-06-21T13:04:17.674Z","updated":"2022-06-21T13:04:17.674Z","comments":false,"path":"about/index.html","permalink":"http://blog.sharktale.xyz/about/index.html","excerpt":"","text":"这里是Sharktale，建给陪伴我的鲨鲨。 我喜欢新鲜空气，各种新奇的事物和ns！ 首页侧边栏的avatar，只是个随机占位图片，因为我不想选个固定的avatar…… 这是我的鲨鲨："},{"title":"所有分类","date":"2022-06-21T13:04:17.674Z","updated":"2022-06-21T13:04:17.674Z","comments":false,"path":"categories/index.html","permalink":"http://blog.sharktale.xyz/categories/index.html","excerpt":"","text":""},{"title":"友链","date":"2022-06-21T13:04:17.678Z","updated":"2022-06-21T13:04:17.678Z","comments":true,"path":"friends/index.html","permalink":"http://blog.sharktale.xyz/friends/index.html","excerpt":"感谢之前就在网络上认识我的人们，以及现在认识我的人们。","text":"感谢之前就在网络上认识我的人们，以及现在认识我的人们。 欢迎向我发送邮件 或者 通过评论，添加友链。 添加要求： 您的网站上没有令人不适的内容与广告推广 建议采用的申请格式： 名 称：一只脆脆鲨头像链接：https://picsum.photos/200/300主页链接：http://blog.sharktale.xyz/说明信息：一花一世界，一叶一菩提"},{"title":"所有标签","date":"2022-06-21T13:04:17.678Z","updated":"2022-06-21T13:04:17.678Z","comments":false,"path":"tags/index.html","permalink":"http://blog.sharktale.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Notes|docker 使用与排查笔记","slug":"docker-commands","date":"2022-06-12T10:09:13.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"docker-commands/","link":"","permalink":"http://blog.sharktale.xyz/docker-commands/","excerpt":"我会用到的关于 docker 和 docker compose 的简单笔记","text":"我会用到的关于 docker 和 docker compose 的简单笔记 容器上线与删除sudo nano docker-compose.yml # 写 dockerfile sudo rm docker-compose.yml # 移除 dockerfile docker-compose up -d # 上线容器 docker-compose down # 删除容器 检查 docker 运行问题针对容器 docker container ls # 显示 container ID, 创建时间, 运行状态, ports docker ps # 显示所有 container 的信息 可以用这个命令，查看 container 是否在发生不断 restart 的故障 docker logs &lt;container_ID&gt; # 显示某个 container 的运行日志 用来查看 container 发生故障的详细原因 docker stop &lt;container_ID&gt; # 停止某个容器 docker rm &lt;Container_ID&gt; # 删除某个容器 针对镜像 docker images # 展示 IMAGE ID，IMAGE 的版本(时间) docker rmi &lt;IMAGE_ID&gt; # 删除对应镜像 rm -rf miniflux-db # 删除持久化数据，使用volumes:下面的名字 容器内部执行命令非 docker 安装时，可以切换到某个目录，再执行这个应用特有的命令。但是，使用 docker 安装的应用，执行特定操作时，则需要用到 docker exec命令 两种情况的情况的区别 # Disabling serverside encryption) # (1)非 docker 安装的 Nextcloud cd /var/www/nextcloud. sudo -u www-data ./occ maintenance:singleuser –on # Switch the Nextcloud single user mode to on sudo -u www-data ./occ encryption:disable. # Disable encryption sudo -u www-data ./occ maintenance:singleuser –off # Turn off single user mode with the command # (2)docker 安装的 Nextcloud docker exec -it -u www-data nextcloud_app_1 php occ # 查询 nextcloud 所有可用命令，这里的 nextcloud_app_1 是 Container_Name docker exec -it -u www-data nextcloud_app_1 php occ encryption:decrypt-all # Disable server-side encryption and decrypt all files 输出容器内可执行命令列表安装 runlike apt install python3-pip pip install runlike 输出命令 runlike &lt;container_ID&gt; docker exec 的用法docker exec [OPTIONS] CONTAINER COMMAND [ARG...] options： Name, shorthand Default Description --detach , -d Detached mode: run command in the background --detach-keys Override the key sequence for detaching a container --env , -e Set environment variables --env-file Read in a file of environment variables --interactive , -i Keep STDIN open even if not attached --privileged Give extended privileges to the command --tty , -t Allocate a pseudo-TTY --user , -u Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;]) --workdir , -w Working directory inside the container examples： # (1)create a container named ubuntu_bash and start a Bash session. docker run --name ubuntu_bash --rm -i -t ubuntu bash # (2)create a new file /tmp/execWorks inside the running container ubuntu_bash, in the background. docker exec -d ubuntu_bash touch /tmp/execWorks # (3)create a new Bash session in the container ubuntu_bash. docker exec -it ubuntu_bash bash # (4)create a new Bash session in the container ubuntu_bash with environment variable $VAR set to “1”. docker exec -it -e VAR=1 ubuntu_bash bash # Note that this environment variable will only be valid on the current Bash session. By default docker exec command runs in the same working directory set when container was created. 切换位置切换到容器数据所在位置 docker container exec -it &lt;container_ID&gt; bash 之后就可以正常使用 cd 从容器内部复制文件夹到容器外面docker cp &lt;container_ID&gt;:/file/path/within/container /host/path/target identify which container owns which overlay directoryoverlay 位于 /var/lib/docker/overlay，用于存放 container 的数据文件 一个讲容器和目录对应起来的运行命令 docker inspect $(docker ps -qa) | jq -r &#39;map([.Name, .GraphDriver.Data.MergedDir]) | .[] | &quot;\\(.[0])\\t\\(.[1])&quot;&#39; 输出子文件夹名称和对应的 contianer name 部分命令说明： docker inspect $(docker ps -qa) # Display full docker details. jq -r # Parse json and output regular strings map([.Name, .GraphDriver.Data.MergedDir]) # For each element in the original array, find the `Name` and the overlay `MergedDir`. &quot;\\(.[0])\\t\\(.[1])&quot; # Output the first two elements of the array.","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.sharktale.xyz/tags/docker/"},{"name":"docker-compose","slug":"docker-compose","permalink":"http://blog.sharktale.xyz/tags/docker-compose/"},{"name":"Nextcloud","slug":"Nextcloud","permalink":"http://blog.sharktale.xyz/tags/Nextcloud/"}]},{"title":"MATLAB|从 IEEE Xplore 批量下载论文","slug":"bulk-download-from-IEEE-Xplore","date":"2022-05-24T06:55:39.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"bulk-download-from-IEEE-Xplore/","link":"","permalink":"http://blog.sharktale.xyz/bulk-download-from-IEEE-Xplore/","excerpt":"手动从 IEEE Xplore 导出 .csv，主要使用 MATLAB 的函数 webread 和 websave 实现自动批量下载。","text":"手动从 IEEE Xplore 导出 .csv，主要使用 MATLAB 的函数 webread 和 websave 实现自动批量下载。 参考了这篇，修改了自定义函数的部分文字输出，写了些注释和使用说明 使用要求： 连接校园网 自己的校园网可以下载 IEEE Xplore 有 MATLAB 选好文献，导出 .csv 文件之后，填写 .csv 文件的位置 clc export = &#39;C:\\Users\\xxxx\\Downloads\\export2022.05.24-01.31.59.csv&#39;; % .csv地址 skip = 0; DownloadPDFfromXplore(export, skip); % pdf会下载到current folder 其中，自定义函数 DownloadPDFfromXplore 内容 function DownloadPDFfromXplore(export, skip) %% download pdf from IEEE EXplore export file % if termites at any exception, we can restart and skip those downloaded if nargin == 1 skip = 0; end [raw_numerical, raw_text, ~] = xlsread(export); % 读取.csv文件信息 UrlList = raw_text(skip+3:end, 16); NameList = raw_text(skip+3:end, 1); YearList = raw_numerical(skip+1:end, 1); pat = &#39;[\\\\/:*?&quot;&lt;&gt;|]&#39;; NameList = regexprep(NameList, pat, &#39; &#39;); % 替换文件名中不允许出现的符号为空格 for k = 1 : length(NameList) html = webread(UrlList&#123;k&#125;); first = strfind(html, &#39;&lt;iframe src=&quot;h&#39;); last = strfind(html, &#39;&quot; frameborder=0&gt;&#39;); url = html(first+13:last-1); filename = [num2str(YearList(k)) &#39; &#39; NameList&#123;k&#125; &#39;.pdf&#39;]; websave(filename, url); % 将url地址内容保存到本地并命名为filename。 myString = fprintf(&#39;(%d/%d) %s ... DONE\\n&#39;,k,length(NameList),filename); disp(myString); % 显示获取进度 waitTime = 30 * rand() + 30; % 模拟人工操作的随机等待时间，避免被封IP pause(waitTime); end","categories":[],"tags":[{"name":"download","slug":"download","permalink":"http://blog.sharktale.xyz/tags/download/"},{"name":"IEEE","slug":"IEEE","permalink":"http://blog.sharktale.xyz/tags/IEEE/"},{"name":"MATLAB","slug":"MATLAB","permalink":"http://blog.sharktale.xyz/tags/MATLAB/"}]},{"title":"Ubuntu|新 linux 主机需要的一些设置","slug":"what_is_required_for_a_new_host","date":"2022-05-18T05:06:39.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"what_is_required_for_a_new_host/","link":"","permalink":"http://blog.sharktale.xyz/what_is_required_for_a_new_host/","excerpt":"updated （2022-05-18）: 根据 酸橘汁腌鱼 的 VPS 安全初始化 进行了修改","text":"updated （2022-05-18）: 根据 酸橘汁腌鱼 的 VPS 安全初始化 进行了修改 设置与连接 SSH安装 PuTTY使用 windows 电脑连接 remote 的 Linux VPS，需要一个图形化的界面 If your Windows is Windows 10 Version 1803, OpenSSH Client has been implemented as a Windows feature, so it’s possible to use ssh command on command prompt without Putty and other SSH software. open SSH 客户端的使用大同小异。下载 PuTTY，本次需要用到的是 PuTTY 和 PuTTYgen，这两个在一次安装后都会出现 进行 SSH 连接打开 PuTTY，输入 Host Name ( IP address )，和 Port (一般为22) ，然后按下 open，进入一个命令行窗口。在命令行窗口中，输入登录信息（login as 与 password，这两个在购买 VPS 的时候就已经得到了） 密码在输入的过程中，是不显示的，如果输入正确，会显示一些 VPS 系统相关的简要信息 更新 VPS 的 packages在上一步中如果密码输入正确，还会显示需要更新的内容。输入一下内容，进行可更新 packages 的检查 apt update 再次输入 apt update，即可开始更新，更新完成后需要 reboot，使更新生效 创建新用户并修改用户权限前面都使用 root 账户操作，root 对系统具有全部权限，因而可能对系统造成严重的损害，所以使用 root 是 不够安全的。而一个具有 superuser 权限的常规账户，需要在命令前面加上 sudo 前缀，才能获取管理员权限。添加新用户： adduser &lt;your new username&gt; 为新用户增加 superuser 权限： usermod -aG sudo &lt;your new username&gt; 增加 public key 认证打开 PuTTYgen，点击 generate ，产生 public key。需要填写 Key passphrase，passphrase 会与产生的 key 一起作为密码 keys 产生速度慢的原因找到了……是没有再产生时，在下方空白随意移动鼠标（提示文字说这样可以加入随意的部分在keys中） 填写完成后，在页面选择 Save private key，把产生的文件保存在自己的电脑上。先不要关闭窗口，后面的操作还需要 copy public key 按照前面2步的方法，使用原来的 root 账号登录VPS。 使用以下命令，可以移动到之前创建的新用户的 home directory，这样命令行会对应到创建的新用户 su – &lt;your new username&gt; 之后，按照顺序输入下面的命令，作用是：为 public key 创建新文件夹，限制获取这个文件夹的权限，并且保存 public key mkdir ~/.ssh chmod 700 ~/.ssh nano ~/.ssh/authorized_keys 最后一个命令会开启 Nano editor。 从之前的 PuTTYgen 窗口复制 public key，并且粘贴在这里。 一定要是直接从 Puttygen 复制，才符合authorized_keys的格式要求，后面才不会连接不上！如果发生了这样的事故，请在VPS运行商的页面上选择 Access &gt; Reset root password 然后按住 CTRL + X，来关闭 Nano editor。系统会询问是否保存对 authorized_keys 文件的更改，输入 Y，确认更改 输入下面的命令，作用：更改刚才编辑的文件的 permissions，并返回到 root 用户 chmod 600 ~/.ssh/authorized_keys exit 打开 PuTTY，选择菜单 Connection › SSH › Auth，Browser 载入 private keys 通过SSH连接VPS，并且按照前面的方法，以新用户的身份登入 输入下面的命令来关闭默认的密码的认证方式 注意：如果前面没有用keys登录成功，就不要开始关闭密码认证方式。如果前面设置错了，直接去服务商的网站上去 Rebuild &gt; re-install，然后 Access &gt;Reset root password，然后一切重头再来…… sudo nano /etc/ssh/sshd_config 修改下面的内容（这里参考了鱼的文章） PermitRootLogin no AllowUsers username #如果没有这一行就手动添加 RSAAuthentication yes #这一行我找不到就没有配置 PubkeyAuthentication yes PasswordAuthentication no # 禁止使用密码登录 修改完成后，和前面一样，按住 CTRL + X，来关闭 Nano editor，输入 Y，确认更改 Reboot VPS 或者 输入 service sshd restart 下次登录的时候，就需要使用 private key 和 passphrase 了 改 SSH 端口这部分是新增的，参考了鱼的文章 还是在 /etc/ssh/sshd_config中，在 Port 22 下面增加一行 Port &lt;你选择的端口号&gt; # 换一个22以外的端口号 重启 sshd sudo service sshd restart 打开防火墙，为新增的端口放行。设置好之后，用新端口重新连接一下，没问题的话，注释掉 Port 22 为 VPS 安装防火墙设置防火墙之后，可以限制 VPS 向网络开放的端口。这样可以阻止很多针对服务器的攻击。可以使用 iptables ，来设置一个防火墙。 iptables 只适用于 ipv4 协议，如果需要适用 ipv6协议，需要转而使用ip6tables ufw 也是一个常用的 firewall，也可以使用 ufw （ufw 的设置说不定还要更简单 什么是 iptablesiptables 是 Linux 的一种防火墙程序，它使用 tables 监控来自和去往你的服务器的流量。这些 tables 包含一系列的 rules (chains), 可以过滤包含数据的 packets。 [optin-monster-shortcode id&#x3D;”fv4lqeko3gylvecpszws”] 每当一个 packet 符合一个 rule, 会被添加一个 target。 target 可以是另一个 rule 或者下列特殊值之一： ACCEPT – 允许通过 DROP – 丢弃（不能通过） RETURN – 不能通过这一次的 rule，转送到上一次的 rule 默认的 tables (filter)包含下面3个 rules： INPUT – 过滤进入 server 的 packet FORWARD – 过滤将要被 server 转发 (forward) 的 packet OUTPUT – 过滤离开 server 的 packet 安装并使用 Iptables安装 Iptablessudo apt-get update sudo apt-get install iptables 检查现有 Iptables 设置： sudo iptables -L -v -L：列出所有的rules， -v：展示详细信息 显示所有的 chains 都设置为了 ACCEPT，也即是没有 rules（所有的 packet 都能通过）。 定义新 chain rules新定义的 rule 需要被挂在 chain 的后面，所以需要在 iptables 命令后面加上 -A 选项 (Append)，同时与下面的选项结合： -i (interface) — the network interface whose traffic you want to filter, such as eth0, lo, ppp0, etc. -p (protocol) — the network protocol where your filtering process takes place. It can be either tcp, udp, udplite, icmp, sctp, icmpv6, and so on. Alternatively, you can type all to choose every protocol. -s (source) — the address from which traffic comes from. You can add a hostname or IP address. –dport (destination port) — the destination port number of a protocol, such as 22 (SSH), 443 (https), etc. -j (target) — the target name (ACCEPT, DROP, RETURN). You need to insert this every time you make a new rule. sudo iptables -A &lt;chain&gt; -i &lt;interface&gt; -p &lt;protocol (tcp/udp) &gt; -s &lt;source&gt; --dport &lt;port no.&gt; -j &lt;target&gt; 在下面用 INPUT chain 作为示例。 允许主机内通信使用 lo (loopback) 接口： sudo iptables -A INPUT -i lo -j ACCEPT 这个命令让同一台机器上的数据库和应用程序正常通信 开启 HTTP, SSH 和 SSL 端口协议和端口号的对应是：http (port 80), https (port 443), 和 ssh (port 22) 。这里需要指定 -p 和 –dport 参数。 sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT 检查是否添加进 rule： sudo iptables -L -v 基于 IP 地址过滤 packet用到 -s 选项，例如扔掉来自 192.168.1.3 的 packet： sudo iptables -A INPUT -s 192.168.1.3 -j DROP 如果想要扔掉某个范围 IP地址的 packet，需要先加上 -m iprange，然后用 ––src-range 加上 IP 地址的范围，例如： sudo iptables -A INPUT -m iprange --src-range 192.168.1.100-192.168.1.200 -j DROP 扔掉不符合端口号的所有packets需要先用上面的方法，设置允许的端口号。 sudo iptables -A INPUT -j DROP 删除 rules删除所有的rules：-F 选项 (flush): sudo iptables -F 删除某一条rule： -D 选项： 先排序查看 rules sudo iptables -L --line-numbers 会出现类似下面的情况 Chain INPUT (policy ACCEPT) num target prot opt source destination 1 ACCEPT all -- 192.168.0.4 anywhere 2 ACCEPT tcp -- anywhere anywhere tcp dpt:https 3 ACCEPT tcp -- anywhere anywhere tcp dpt:http 4 ACCEPT tcp -- anywhere anywhere tcp dpt:ssh 需要用到 chain 类型和序号来执行删除命令。例如，删除 INPUT chain 的第 3 条： sudo iptables -D INPUT 3 关闭 Iptables 防火墙sudo iptables -F sudo /sbin/iptables-save 保存 Iptables 更改Iptables chains 更改的数据存于缓存里，但是重启 server 之后需要重新定义 chains。采用下面的命令，保证重启后更改仍是生效的。 每次更改 Iptables 后，都应该运行这个命令 sudo /sbin/iptables-save 进一步的安全防护这里参考 酸橘汁腌鱼 的 VPS 安全初始化 ，感谢鱼的文章，让我知道了更多 VPS 的安全防护方法 运行防病毒软件 ClamAV# 安装 sudo apt update sudo apt install clamav clamav-daemon -y sudo systemctl stop clamav-freshclam # 停止服务 sudo freshclam # 执行更新 sudo systemctl start clamav-freshclam # 再次启动 clamav-freshclam sudo systemctl is-enabled clamav-freshclam # 设置开机自启动 ls /var/lib/clamav/ # 下载 ClamAV 数据库 # nice：降低 clamscan 的优先级（限制相对 cpu 时间） sudo nice -n 15 clamscan # 限制 Clamscan CPU 使用率 # cpulimit：限制绝对的 CPU 时间。 安装cpulimit sudo apt-get install cpulimit cpulimit -z -e clamscan -l 20 &amp; clamscan -ir / 其它可能用到的命令 clamscan /home/filename.docx #扫描特定目录或文件 clamscan --no-summary /home/ #扫描结束时不显示摘要 clamscan -i / #打印受感染的文件 clamscan --bell -i /home #警惕病毒检测 clamscan -r --remove /home/USER #删除受感染的文件 返回码 0：未发现病毒。 1：发现病毒。 2：发生了一些错误。 安装 fail2ban 以阻止重复登录尝试sudo apt update sudo apt upgrade -y sudo apt install fail2ban sudo nano /etc/fail2ban/jail.local 写入 [DEFAULT] destemail = your@email.here sendername = Fail2Ban [sshd] enabled = true port = 22 # 换成前面自己设置的 SSH 端口号 [sshd-ddos] enabled = true port = 22 # 换成前面自己设置的 SSH 端口号 重启fail2ban sudo systemctl restart fail2ban 最后的最后鱼的新文章还给出了安全检查的 tips，看一看会更有收获： https://seviche.cc/2022-05-07-vps-init#%E6%97%A5%E5%B8%B8%E9%98%B2%E6%8A%A4 参考资料[1] 5 Steps to Get Your New Virtual Private Server (VPS) Ready to Use [2] Iptables Tutorial – Securing Ubuntu VPS with Linux Firewall [3] 酸橘汁腌鱼 的 VPS 安全初始化","categories":[],"tags":[{"name":"VPS","slug":"VPS","permalink":"http://blog.sharktale.xyz/tags/VPS/"},{"name":"PuTTY","slug":"PuTTY","permalink":"http://blog.sharktale.xyz/tags/PuTTY/"},{"name":"Iptables","slug":"Iptables","permalink":"http://blog.sharktale.xyz/tags/Iptables/"}]},{"title":"Docker-compose|安装 wallabag 作为 miniflux 的插件","slug":"wallabag-integration-for-miniflux","date":"2022-05-16T05:47:23.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"wallabag-integration-for-miniflux/","link":"","permalink":"http://blog.sharktale.xyz/wallabag-integration-for-miniflux/","excerpt":"wallabag 的优点是可以下载并保存网页，防止链接失效无法访问收藏的内容。wallabag 有一些抓取不全的问题，用作 miniflux 的插件就还好。本文说明了如何使用 docker-compose 安装 wallabag ，以及在 miniflux 中使用 wallabag。 2022&#x2F;6&#x2F;21：新增一些 wallabag console command，如果忘记了密码，可以用命令直接修改","text":"wallabag 的优点是可以下载并保存网页，防止链接失效无法访问收藏的内容。wallabag 有一些抓取不全的问题，用作 miniflux 的插件就还好。本文说明了如何使用 docker-compose 安装 wallabag ，以及在 miniflux 中使用 wallabag。 2022&#x2F;6&#x2F;21：新增一些 wallabag console command，如果忘记了密码，可以用命令直接修改 安装 wallabag (docker-compose)docker-compose.yml 的填写参考官方说明，各个环境变量的说明在这里 version: &#39;3&#39; services: wallabag: image: wallabag/wallabag container_name: wallabag # 自定义容器名 depends_on: - db - redis ports: - 自定义端口号:80 # 前面的是为自定义端口，80不可变 environment: - MYSQL_ROOT_PASSWORD=wallaroot - SYMFONY__ENV__DATABASE_DRIVER=pdo_mysql - SYMFONY__ENV__DATABASE_HOST=db - SYMFONY__ENV__DATABASE_PORT=3306 - SYMFONY__ENV__DATABASE_NAME=wallabag - SYMFONY__ENV__DATABASE_USER=wallabag - SYMFONY__ENV__DATABASE_PASSWORD=wallapass - SYMFONY__ENV__DATABASE_CHARSET=utf8mb4 # SYMFONY__ENV__DOMAIN_NAME不能用 127.0.0.1:端口号，也不能用 ip地址:端口号 # 否则将出现加入reverse proxy之后，wallabag图标主题等显示不全的问题 - SYMFONY__ENV__DOMAIN_NAME=https://wallabag.example.com # 修改为自己的域名 # 邮箱设置(下面是默认设置的值，其实不设置也不影响使用) - SYMFONY__ENV__MAILER_HOST=127.0.0.1 - SYMFONY__ENV__MAILER_USER=~ - SYMFONY__ENV__MAILER_PASSWORD=~ - SYMFONY__ENV__FROM_EMAIL=wallabag@example.com volumes: # 冒号之前的目录名是上文要求你新建的文件夹地址 - /wallabag/images:/var/www/wallabag/web/assets/images - /wallabag/data:/var/www/wallabag/data restart: always db: image: mariadb container_name: wallabag_mariadb environment: - MYSQL_ROOT_PASSWORD=wallaroot volumes: # 冒号之前的目录名是上文要求你新建的文件夹地址 - /wallabag/mysql:/var/lib/mysql restart: always redis: image: redis:alpine container_name: wallabag_redis restart: always 然后是自己用 caddy 设置了 reverse-proxy 输入网址，即可管理 wallabag 和创建新用户 创建完成的 wallabag 实例，有默认的管理帐号： 用户名和密码都是 wallabag （记得登录上去修改密码） 可以直接在 web 端，使用管理帐号创建新帐号，或者 enable 新注册的帐号 在 miniflux 中使用 wallabag integrationintegration 的添加引用参考 miniflux 的 Integration with External Services，就可以完成了 然后就可以在 miniflux ，save 文章到 wallabag 稍后读啦~ wallabag 的 re-fetch content，帮我弥补了忘记在 miniflux 设置全文抓取了问题。但是，我现在发现 wallabag 的抓取问题有： 对于 podcast，抓取不了附带的音频，但是 miniflux 能做到。 对于有些代码块，显示奇怪，比如，行号和内容会分开，但是 miniflux 不会出问题 对于有些文章，内容本来就只有几行，会显示 reload 失败，其实是已经抓取了全文了 caddy 的简要使用方法在设置 caddy 的时候遇到了一些问题，于是再次重新设置了，记一下（万一以后又出错了） caddy 可以自动获取 Let’s Encrypt SSL certificate 并自动续期，设置也比 NGINX 简单。 caddy 的设置参考了Docker 快速搭建 Miniflux + RSSHub 下载 caddy # 下载编译好的 Caddy 执行档 wget https://github.com/caddyserver/caddy/releases/download/v2.0.0-beta.15/caddy2_beta15_linux_amd64 # 赋予执行和设定低端口绑定的权限 chmod +x caddy2_beta15_linux_amd64 &amp;&amp; sudo setcap cap_net_bind_service=+ep caddy2_beta15_linux_amd64 # 把执行档放在系统文件夹并改名 sudo mv caddy2_beta15_linux_amd64 /usr/local/bin/caddy 创建 caddyfile sudo mkdir /etc/caddy &amp;&amp; sudo nano /etc/caddy/Caddyfile 写入 caddyfile wallabag.example.com &#123; encode zstd gzip reverse_proxy localhost:8090 # 修改为自己的端口号 &#125; 防火墙打开 port 80 和 port 443，为 caddy 申请 SSL certificate 做准备 sudo iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT sudo iptables -I INPUT -p tcp -m tcp --dport 443 -j ACCEPT sudo apt install iptables-persistent # 将上面2个防火墙规则自动永久载入本机 试运行 caddyfile sudo caddy run --config /etc/caddy/Caddyfile 如果没问题，会看见显示一连串的 INFO，包括获取证书的提示。此时访问设置好的域名，将可以访问服务。确认没问题之后，ctrl + C 中断 caddyfile 执行 下面要做的是设置系统每次重启，都会自动启动 caddy 新建设置文件 sudo nano /etc/systemd/system/caddy.service 写入 [Unit] Description=Caddy Server After=syslog.target After=network.target [Service] User=root Group=root LimitNOFILE=64000 ExecStart=/usr/local/bin/caddy run --config /etc/caddy/Caddyfile Restart=always [Install] WantedBy=multi-user.target 启用 caddy sudo systemctl daemon-reload sudo systemctl enable caddy.service sudo systemctl start caddy.service 管理 MariaDB（其实用 wallabag 自带的命令，会更简单，下一节有写） 进入 MariaDB mysql -u root -p -h localhost 显示全部 databases SHOW DATABASES; 使用某一个 database USE &lt;databasename&gt;; 展示选择的 database 的 tables SHOW tables; 显示 table 里面的数据 SHOW [FULL] &#123;COLUMNS | FIELDS&#125; FROM tbl_name [FROM db_name] [LIKE &#39;pattern&#39; | WHERE expr]; 例如： SHOW COLUMNS FROM mytable FROM mydb; SHOW COLUMNS FROM mydb.mytable; Console Commands (docker-compose version) wallabag has a number of CLI commands to manage a number of tasks. 这里写出针对 docker-compose 安装方式的命令使用，格式是： docker exec -t &lt;container-name&gt; /var/www/wallabag/bin/console &lt;your-command&gt; --env=prod --no-interaction 是 wallabag 容器的名字，如果记不清了，使用 docker container ls 命令查询 就是官方说明文档里，针对非 docker-compose 安装方式的命令 help 是查询命令的详细用法 一些重要的可用 ： assets:install # May be helpful if assets are missing. cache:clear # should be run after each update (included in make update). doctrine:migrations:status # Output the status of your database migrations. fos:user:activate # 手动激活用户 fos:user:change-password # 修改用户密码 fos:user:create # 创建用户 fos:user:deactivate # 冻结用户 fos:user:demote # 移除用户角色，通常是不再设为管理员 fos:user:promote # 添加用户角色，通常是设为管理员 rabbitmq:* # May be useful if you&#39;re using RabbitMQ. wallabag:clean-downloaded-images # Cleans downloaded images which are no more associated to an entry wallabag:clean-duplicates # Removes all entry duplicates for one user or all users wallabag:entry:reload # Reload entries. wallabag:export # Exports all entries for a user. You can choose the output path of the file. wallabag:generate-hashed-urls # Generates hashed urls for each entry wallabag:import # Import entries to different formats to a user account. wallabag:import:redis-worker # 添加 Redis worker wallabag:install # (re)Install wallabag wallabag:tag:all # Tag all entries for a user using his/her tagging rules. wallabag:user:show # Shows the details for a user. wallabag:user:list # 列出存在的所有用户","categories":[],"tags":[{"name":"docker-compose","slug":"docker-compose","permalink":"http://blog.sharktale.xyz/tags/docker-compose/"},{"name":"RSS","slug":"RSS","permalink":"http://blog.sharktale.xyz/tags/RSS/"},{"name":"Miniflux","slug":"Miniflux","permalink":"http://blog.sharktale.xyz/tags/Miniflux/"},{"name":"Wallabag","slug":"Wallabag","permalink":"http://blog.sharktale.xyz/tags/Wallabag/"}]},{"title":"Win|在 WSL 上 Emacs 的安装与使用","slug":"install-doomemacs-on-wsl-ubuntu","date":"2022-05-11T09:26:41.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"install-doomemacs-on-wsl-ubuntu/","link":"","permalink":"http://blog.sharktale.xyz/install-doomemacs-on-wsl-ubuntu/","excerpt":"可以在 Windows 系统中使用 Windows Subsystem for Linux (WSL)，来搭载 Emacs 和 Doom Emacs。 但是，千万不要直接 sudo apt install emacs27 ，安装的是 emacs 26.3，用不了 doom emacs 。操作根据 doom emacs 针对 wsl 的官方教程，在这里。 狐狸对这个笔记提供了大量支持，加上我实现不了 coauthor 功能，所以这一篇的作者就写狐狸啦~","text":"可以在 Windows 系统中使用 Windows Subsystem for Linux (WSL)，来搭载 Emacs 和 Doom Emacs。 但是，千万不要直接 sudo apt install emacs27 ，安装的是 emacs 26.3，用不了 doom emacs 。操作根据 doom emacs 针对 wsl 的官方教程，在这里。 狐狸对这个笔记提供了大量支持，加上我实现不了 coauthor 功能，所以这一篇的作者就写狐狸啦~ 安装 WSL，Emacs 和 Doom Emacs安装 WSL (Ubuntu)根据 Ubuntu 给出的 Install WSL，按 Windows 键，搜索 Windows features，勾选 Virtual Machine Platform，开启自带的 虚拟机（也就是 WSL），重启电脑后生效 在 Microsoft store 中，搜索 Ubuntu 进行安装 如果选择名为 Ubuntu 的软件，就是安装最新的 Ubuntu 版本 安装结束后，打开 Ubuntu，升级 Ubuntu 的包 sudo apt update &amp;&amp; sudo apt upgrade 安装 Emacssudo add-apt-repository ppa:kelleyk/emacs sudo apt update sudo apt install emacs27 安装 Doom 的依赖# required dependencies sudo apt-get install git ripgrep # optional dependencies sudo apt-get install fd-find 安装 Doom Emacsgit clone https://github.com/hlissner/doom-emacs ~/.emacs.d ~/.emacs.d/bin/doom install 很容易因为网络，导致安装出问题，遇到了不要担心，多运行 ~/.emacs.d/bin/doom install 几次就好啦 更新 Doom Emacs这一步也可以先不做 ~/.emacs.d/bin/doom sync # 同步 ~/.emacs.d/bin/doom upgrade # 升级包 ~/.emacs.d/bin/doom doctor # 诊断问题 使用 Doom Emacs安装好后用 emacs -nw 在终端里运行 emacs，M-x 然后输入 load theme 就能换主题了 M-x 就是 Alt 键和 x 键同时按下 首先推荐用这个方式输入命令，他里面也会提示快捷键的，用的多了就能熟悉快捷键了~ 提示了快捷键，space-h-t 也可以看主题 快捷命令SPC . # 打开文件菜单 SPC &lt; # 打开最近的窗口 bookmark set # 将当前文件加入书签 SPC RET（空格） # 打开收藏夹 SPC # 退出窗口 SPC w h/j/k/l # 就是管理窗口 SPC w q # 退出现在聚焦的窗口 SPC 是空格键 space 不过掌握最基础的 i 进入插入模式，然后 ESC 退出 :w 保存就行了 试试加包SPC f P 是打开配置文件夹，选择 init.el 就可以编辑这个文件了。输入 /org 查找 org 字符串。按下回车就进入查找，移动到 org 包后按 esc 退出 查找模式，按下 i 进入插入模式，改成这样~ 156 (org 157 +roam2 158 +pomodoro) 这样就安装了 roam2 和 番茄时钟 (可选) 按 ESC 退出 插入模式，按下 :w 回车保存文件。然后，M-x 输入 reload ，选择 doom/reload 重载配置，这样就会去安装包了 关于rime 的包可以再安安 rime 的包，不过 wsl 里应该要 apt install librime 安一下依赖 这样就可以用上自己的设置了，不过不建议双方同步词库，比较难搞…… emacs 里的 rime 包好处就是有断言，输入中文打个空格可以自动切换英文 emacs 下的 rime 路径是 ~/.emacs/.local/etc/rime/ vim 模式有点不习惯也可以直接用 win 下的编辑器打开 init.el 文件，正好可以熟悉一下 wsl 里的文件放在哪个目录……毕竟要把自己的 rime 文件扔进 wsl 里…… init.el 文件里 elisp 语言的注释是 ;; (doom! :input ;;chinese ←这 ;;japanese ;;layout ; auie,ctsrnm is the superior home row 开始写笔记SPC . 然后在一个路径下输入文件名，完成新建文件 (像 nano 一样)，就可以开始写笔记啦~ 后缀名 .org 可以切到 org 模式哦 写日记需要的包是 org-roam 包 玩游戏俄罗斯方块 M-x tetris，其余游戏见 Fun and Games in Emacs","categories":[],"tags":[{"name":"WSL","slug":"WSL","permalink":"http://blog.sharktale.xyz/tags/WSL/"},{"name":"Emacs","slug":"Emacs","permalink":"http://blog.sharktale.xyz/tags/Emacs/"},{"name":"Doom Emacs","slug":"Doom-Emacs","permalink":"http://blog.sharktale.xyz/tags/Doom-Emacs/"}],"author":"Southfox"},{"title":"Hexo|实现代码高亮的多彩——针对 volantis 主题","slug":"edit-highlightjs-for-volantis","date":"2022-05-10T14:03:09.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"edit-highlightjs-for-volantis/","link":"","permalink":"http://blog.sharktale.xyz/edit-highlightjs-for-volantis/","excerpt":"volantis 主题的默认代码块是单一颜色的，所以如果需要实现不同代码部分的多种颜色，需要自己进行修改。而如果使用 Hexo 的 highlightjs，进行代码块的 layout 自定义，则不能显示代码行数，进而添加 highlightjs-line-numbers.js 实现显示代码行数。操作参考 highlightjs-line-numbers.js 官方文档，只是针对 volantis 主题需要修改的文件有一些小差别。","text":"volantis 主题的默认代码块是单一颜色的，所以如果需要实现不同代码部分的多种颜色，需要自己进行修改。而如果使用 Hexo 的 highlightjs，进行代码块的 layout 自定义，则不能显示代码行数，进而添加 highlightjs-line-numbers.js 实现显示代码行数。操作参考 highlightjs-line-numbers.js 官方文档，只是针对 volantis 主题需要修改的文件有一些小差别。 highlightjs-line-numbers.jshighlightjs 的作者表示代码添加行号很多余，可以把代码分段插入来避免可能的问题。作者同时也表示，“the only way to show that they are better is to set up some usability research on the subject. I doubt anyone would bother to do it”。但是，就是有人 bother to do it. highlightjs-line-numbers.js 就是其中一个实现代码行号的 plugin highlightjs-line-numbers.js 的安装，可以采用 Bower&#x2F;Npm，也可以直接从 CDN引入。 修改highlight.js修改 highlight.js ，为代码添加行数显示 对于volantis 主题，则需要在~\\themes\\volantis\\layout\\_plugins\\highlight\\ 的 script.ejs 末尾添加 &lt;% if (theme.plugins.highlightjs.js) &#123; %&gt; &lt;%- js(theme.plugins.highlightjs.js) %&gt; &lt;script src=&quot;//cdn.jsdelivr.net/npm/highlightjs-line-numbers.js@2.8.0/dist/highlightjs-line-numbers.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt; &lt;script&gt;hljs.initLineNumbersOnLoad(&#123;singleLine:true&#125;);&lt;/script&gt; &lt;script&gt; &lt;% &#125; %&gt; volantis.pjax.push(()=&gt;&#123; document.querySelectorAll(&#39;pre code&#39;).forEach((block) =&gt; &#123; hljs.highlightBlock(block); hljs.lineNumbersBlock(block,&#123;singleLine:true&#125;); &#125;); &#125;,&quot;highlightjs&quot;) &lt;/script&gt; 创建代码块样式文件这部分参考了 GOOPHER 的操作 在 ~/themes/volantis/source/css/ 目录下创建 _other 文件夹，并在里面创建一个名为 codeblock.styl 的文件，文件内容直接复制自 highlightjs-line-numbers.js 说明的 cool style 部分 /* for block of numbers */ .hljs-ln-numbers &#123; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; text-align: center; color: #ccc; border-right: 1px solid #CCC; vertical-align: top; padding-right: 5px; /* your custom style here */ &#125; /* for block of code */ .hljs-ln-code &#123; padding-left: 10px; &#125; 打开 ~/themes/volantis/source/css/ 目录下的 style.styl 文件，添加以下内容，引入样式 @import &#39;_other/*&#39; 修改 _config.yml 和 _config.volantis.yml打开 _config.yml ，设置 disable highlight 和 enable highlightjs # 修改的内容 highlight: enable: false hljs: true 打开 _config.volantis.yml ，去除# highlightjs: copy_code: true # 删除下面2行前面的# js: ... css: .... _config.volantis.yml 里一些可能会用到的修改语句 light: # 区块和代码块背景色(填充) block: &#39;#f6f6f6&#39; # 代码块高亮时的背景色(边框) codeblock: &#39;#FFF7EA&#39; # 行内代码颜色 inlinecode: &#39;#4282d7&#39; # &#39;#c74f00&#39; 最后的效果","categories":[],"tags":[{"name":"volantis","slug":"volantis","permalink":"http://blog.sharktale.xyz/tags/volantis/"},{"name":"highlightjs","slug":"highlightjs","permalink":"http://blog.sharktale.xyz/tags/highlightjs/"},{"name":"hexo","slug":"hexo","permalink":"http://blog.sharktale.xyz/tags/hexo/"}]},{"title":"Docker-compose|Nextcloud 安装与可用 container commands","slug":"install-nextcloud","date":"2022-05-05T03:09:03.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"install-nextcloud/","link":"","permalink":"http://blog.sharktale.xyz/install-nextcloud/","excerpt":"使用 docker-compose 安装 Nextcloud，Caddy 作为 reverse-proxy 以及获取 SSL 证书","text":"使用 docker-compose 安装 Nextcloud，Caddy 作为 reverse-proxy 以及获取 SSL 证书 docker-compose 安装 Nextcloud这里参照的官方的 Base version - apache version，使用 apache image 和 mariaDB 这个方法自己是没有 SSL ，后面我采用 Caddy 实现 SLL 和 reverse-proxy 由于之前我的 vps 上已经安装过了 docker-compose 和 Caddy，所以直接从写 docker-compose.yml 开始 # 新建目录和docker-compose.yml文件 sudo mkdir ~/nextcloud &amp;&amp; cd ~/nextcloud sudo nano docker-compose.yml 在 docker-compose.yml 中粘贴一下内容，并保存 version: &#39;2&#39; volumes: nextcloud: db: services: db: image: mariadb:10.5 restart: always command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW volumes: - db:/var/lib/mysql environment: - MYSQL_ROOT_PASSWORD=password1 # 这里要填写自己的密码,要与后面2个密码不一样 - MYSQL_PASSWORD=password2 # 这里要填写自己的密码 - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud app: image: nextcloud restart: always ports: - 8080:80 # 如果之前已经占用了8080端口，记得换成别的端口 links: - db volumes: - nextcloud:/var/www/html environment: - MYSQL_PASSWORD=password2 # 这里要填写自己的密码 - MYSQL_DATABASE=nextcloud - MYSQL_USER=nextcloud - MYSQL_HOST=db 运行 docker-compose up -d 上线容器后，在浏览器输入 服务器IP地址:8080/ 可以看到你的 Nextcloud，继续用图形界面注册 管理员帐号 以及 完成安装 如果在 docker-compose.yml 中选择了其它端口号，也要在这里换成别的端口号 设置 Caddy由于这台机器上已经安装了 Caddy（在之前安装 miniflux 的时候），所以这里直接继续使用 Caddy # 打开上次写过的 Caddyfile sudo nano /etc/caddy/Caddyfile 假如你把 Nextcloud 放在 site.example.com ，在 Caddyfile 末尾增加上以下内容 https://site.example.com &#123; encode zstd gzip reverse_proxy 127.0.0.1:8080 # 这个端口号与 docker-compose.yml 中端口号保持一致 &#125; 如果在同一个 vps 上运行多个网站，需要为这些网站都 添加 DNS 的 A 记录 启用新的 Caddy Service，Caddy 就会自动为你申请 SSL 证书啦 sudo systemctl daemon-reload sudo systemctl enable caddy.service sudo systemctl start caddy.service 然后你就可以输入网址，开始你的 Nextcloud 之旅啦 Caddy 使用遇到的问题与解决 一开始直接 reload caddy 之后，显示 run: loading initial config: loading new config: starting caddy administration endpoint: listen tcp 127.0.0.1:2019: bind: address already in use 这是由于已有进程使用 port 2019 ，看到有人通过改 port 为 2020 得到了解决（我用的上一章末的三行代码解决），在整个 Caddyfile 最前面增加 &#123; admin 0.0.0.0:2020 &#125; 如果还是没有得到解决的话，根据对于 admin 的说明，可以设置关闭 admin endpoint。但是这样做的缺点是，caddy 的配置改变后需要停止再重启服务。 &#123; admin off &#125; 遇到了 443 端口被占用的问题 run: loading initial config: loading new config: http app module: start: tcp: listening on :443: listen tcp :443: bind: address already in use 这是由于之前已经运行了一个带有 SSL 的网站导致的，参考 Issue，直接 caddy stop，然后 sudo systemctl daemon-reload # 这一行特别重要 sudo systemctl enable caddy.service sudo systemctl start caddy.service Nextcloud SecurityNextcloud 提供了 Nextcloud Security Scan，可以从外部对服务器进行检查，根据检查的结果反馈进行安全提升。 如果显示 __Host-Prefix 有问题，参考 Overwrite parameters，在 config/config.php 中添加这下面这行 &#39;overwriteprotocol&#39; =&gt; &#39;https&#39;, 这里提到的 config/config.php ，是 Nextcloud 存储 config 的地方，可以采用 find /var -name &quot;config.php&quot; 查找 还要在 Nextcloud 的用户界面内，点击右上角的头像，选择 Setting &gt; Overview 进行安全检查，会出现很多警告，按照提示进行进一步更改。 一些问题的解决遇到了问题 Access through untrusted domain Please contact your administrator. If you are an administrator, edit the “trusted_domains” setting in config&#x2F;config.php like the example in config.sample.php. Further information how to configure this can be found in the documentation. 查找 config.php 位置，进而修改 find /var -name &quot;config.php&quot; server1.example.com 是服务所在域名，修改为 &#39;trusted_domains&#39; =&gt; array ( 0 =&gt; &#39;localhost&#39;, 1 =&gt; &#39;server1.example.com&#39;, 2 =&gt; &#39;192.168.1.50&#39;, 3 =&gt; &#39;[fe80::1:50]&#39;, ), 或者使用环境变量，Start the container with: -e NEXTCLOUD_TRUSTED_DOMAINS=cloud.yourdomain.tld Nextcloud (docker)的一些可用命令docker exec -it -u www-data nextcloud_app_1 php occ # 查询 nextcloud 所有可用命令，这里的 nextcloud_app_1 是我的 Container_Name 查询 Container_Name 可用 docker ps 如果需要迁移data，或许会需要去除 server-side 的 加密，并为所有文件解除加密 docker exec -it -u www-data nextcloud_app_1 php occ encryption:decrypt-all # 这里的 nextcloud_app_1 是我的 Container_Name Disable server side encryption… done. You are about to start to decrypt all files stored in your Nextcloud.It will depend on the encryption module and your setup if this is possible.Depending on the number and size of your files this can take some timePlease make sure that no user access his files during this process!","categories":[],"tags":[{"name":"docker-compose","slug":"docker-compose","permalink":"http://blog.sharktale.xyz/tags/docker-compose/"},{"name":"Nextcloud","slug":"Nextcloud","permalink":"http://blog.sharktale.xyz/tags/Nextcloud/"}]},{"title":"Win|安装 rimerc","slug":"install-rime-and-rimerc","date":"2022-04-27T14:16:25.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"install-rime-and-rimerc/","link":"","permalink":"http://blog.sharktale.xyz/install-rime-and-rimerc/","excerpt":"记录安装 rime 输入法和 rimec 配置文件的过程","text":"记录安装 rime 输入法和 rimec 配置文件的过程 Rime 输入法是一个开源输入法，Rimerc 则解决了 Rime 新手配置难题，开箱即用的特点为输入法用户带来新的可能。本次安装参考 Rimerc (rimer’s dictionary &amp; config) 的官方说明。 安装 rime 输入法 Android 系统在 F-driod 上搜索 Trime，即可安装完成。 windows 系统 在小狼毫的网页上下载，并安装。 其余系统参考 rimerc 的 Readme&gt; Usage &gt; Path 。 下载并安装 rimerc 配置文件这里我采用的是手动安装。 在 release 下载最新版本并解压缩，得到一个名为 rime 的文件夹 Android 需要下载 rimerc-trime-0.1.6.zip，Windows 需要下载 rimerc-weasel-0.1.6.zip，其余系统需要下载的是带有不同输入法名字的.zip文件（名字参照安装 rime 输入法的名字） 如果 Android 不好稳定连接 Github 的话，可以先下载到电脑上，然后通过 KDE Connect 这一类的软件，传输给手机 把解压缩得到的 rime 的文件夹的全部内容，存放到指定的位置 Android 放在 rime 文件夹里（在所有文件&#x2F;rime） Windows 放在 C:\\Users\\ (你的用户名)\\AppData\\Roaming\\Rime 里 找到输入法设定，选择使用的输入法 词库和配置文件，包含明月拼音，仓颉五代等。 如果是使用简体字，推荐选择 明月拼音简化字","categories":[],"tags":[{"name":"rime","slug":"rime","permalink":"http://blog.sharktale.xyz/tags/rime/"},{"name":"rimerc","slug":"rimerc","permalink":"http://blog.sharktale.xyz/tags/rimerc/"},{"name":"输入法","slug":"输入法","permalink":"http://blog.sharktale.xyz/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"}]},{"title":"Docker-compose|安装和使用 miniflux","slug":"install-miniflux-RSSHub","date":"2022-04-24T12:04:27.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"install-miniflux-RSSHub/","link":"","permalink":"http://blog.sharktale.xyz/install-miniflux-RSSHub/","excerpt":"","text":"这里主要想记录一下使用 miniflux + RSSHub 进行 RSS订阅 的笔记~ 2022&#x2F;6&#x2F;21：新增 Miniflux 控制台命令(docker version) docker-compose.yml安装部分参考 Docker 快速搭建 Miniflux + RSSHub ，讲解细致，全程复制粘贴就可以完成！所以不需要我多写啦。 创建目录 mkdir ~/miniflux &amp;&amp; cd ~/miniflux nano docker-compose.yml 写入 docker-compose.yml version: &quot;3&quot; services: miniflux: image: miniflux/miniflux:latest container_name: miniflux restart: unless-stopped ports: - &quot;8888:8080&quot; depends_on: - db - rsshub environment: - DATABASE_URL=postgres://miniflux:somepass888@db/miniflux?sslmode=disable - POLLING_FREQUENCY=15 - RUN_MIGRATIONS=1 db: image: postgres:latest container_name: postgres restart: unless-stopped environment: - POSTGRES_USER=miniflux - POSTGRES_PASSWORD=somepass888 volumes: - miniflux-db:/var/lib/postgresql/data rsshub: image: diygod/rsshub:latest container_name: rsshub restart: unless-stopped ports: - &quot;1200:1200&quot; environment: NODE_ENV: production CACHE_TYPE: redis REDIS_URL: &quot;redis://redis:6379/&quot; PUPPETEER_WS_ENDPOINT: &quot;ws://browserless:3000&quot; depends_on: - redis - browserless browserless: image: browserless/chrome:latest container_name: browserless restart: unless-stopped redis: image: redis:alpine container_name: redis restart: unless-stopped volumes: - redis-data:/data volumes: miniflux-db: redis-data: 启动服务 docker-compose up -d 在 miniflux 目录下，继续初始化 miniflux # miniflux 大版本升级也可能用到这一条 docker-compose exec miniflux /usr/bin/miniflux -migrate 输出显示： -&gt; Current schema version: 56-&gt; Latest schema version: 56 新增 miniflux 管理帐号，用于登录管理后台 docker-compose exec miniflux /usr/bin/miniflux -create-admin 根据输出的提示输入用户名与密码 如果忘记了 miniflux 管理员帐号密码，就这个命令重新建立一个管理员帐号，去网页里管理 之后用 nginx &#x2F; apache &#x2F; caddy 等，设置 reverse proxy miniflux Command Line Usage (docker-compose version)docker exec -it &lt;container-name&gt; /usr/bin/miniflux &lt;your-command&gt; 使用 docker container ls 命令查询 是可用命令 可以替换为 -version # 输出 miniflux 版本号 -info # 输出 miniflux 编译信息 -debug # 开启 debug 模式 -create-admin # 创建用户，并设置为管理员 -reset-password # 重置密码 -reset-feed-errors # 重置所有出错的 feed 一般内容的 RSS 订阅 首先，在 miniflux 选择 Feeds &gt; Add subscription 然后在 RSSHub 官网 查找路由 打开官网需要科学 根据前面提到的教程的介绍，在路由前面加上 http://rsshub:1200 ，得到 URL 如果路由为 /bilibili/user/followers/:uid 那么获得的 URL 格式为：http://rsshub:1200&#x2F;bilibili&#x2F;user&#x2F;followers&#x2F;:uid 把得到的 URL 填入 miniflux 的订阅界面 miniflux 抓取全文在 miniflux 选择 Feeds &gt; 一个订阅的空间 &gt; Edit &gt; Fetch original content (需要页面拉到最下面) 其余（Newletter）订阅这部分由于还没开始用，所以就没写。用到哪里，写到哪里~","categories":[],"tags":[{"name":"docker-compose","slug":"docker-compose","permalink":"http://blog.sharktale.xyz/tags/docker-compose/"},{"name":"miniflux","slug":"miniflux","permalink":"http://blog.sharktale.xyz/tags/miniflux/"},{"name":"RSShub","slug":"RSShub","permalink":"http://blog.sharktale.xyz/tags/RSShub/"},{"name":"RSS","slug":"RSS","permalink":"http://blog.sharktale.xyz/tags/RSS/"}]},{"title":"Ubuntu|安装 element-web","slug":"install-element-web","date":"2022-04-21T14:18:40.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"install-element-web/","link":"","permalink":"http://blog.sharktale.xyz/install-element-web/","excerpt":"在上次的 synapse 上，添加了 element web","text":"在上次的 synapse 上，添加了 element web wget https://github.com/vector-im/element-web/releases/download/v1.10.9-rc.3/element-v1.10.9-rc.3.tar.gz sudo tar -zxvf element-v1.10.9-rc.3.tar.gz -C /etc/matrix-synapse/element sudo mv /etc/matrix-synapse/element/element-v1.10.9-rc.3 /etc/matrix-synapse/element-web cd /etc/matrix-synapse/element-web sudo cp config.sample.json config.json cd ~ sudo nano /etc/matrix-synapse/element-web/config.json https://github.com/vector-im/element-web/releases/download/v1.10.9-rc.3/element-v1.10.9-rc.3.tar.gz 需要换成最新的element-web下载地址 &#x2F;etc&#x2F;matrix-synapse&#x2F;element 和 &#x2F;etc&#x2F;matrix-synapse&#x2F;element-web 是自己建立的文件夹 在”m.homeserver”中，修改”base_url”和”server_name”，适配自己的 matrix 服务器 在之前的 NGINX 配置文件中，添加 root /etc/matrix-synapse/element-web;","categories":[],"tags":[{"name":"element","slug":"element","permalink":"http://blog.sharktale.xyz/tags/element/"},{"name":"matrix","slug":"matrix","permalink":"http://blog.sharktale.xyz/tags/matrix/"}]},{"title":"Ubuntu|搭建 matrix 服务","slug":"install-synapse","date":"2022-04-18T03:35:24.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"install-synapse/","link":"","permalink":"http://blog.sharktale.xyz/install-synapse/","excerpt":"记录一些搭建 matrix 的经历","text":"记录一些搭建 matrix 的经历 配置Postgresql安装 PostgreSQL sudo apt install postgresql 进入 postgres 用户 sudo su - postgres 创建用户和数据库 # this will prompt for a password for the new user createuser --pwprompt synapse_user createdb --encoding=UTF8 --locale=C --template=template0 --owner=synapse_user synapse 修改homeserver.yaml这部分参照官方说明来改就行了 sudo nano /etc/matrix-synapse/homeserver.yaml 安装TLS证书snap package 是安装 certbot 最容易的方式 sudo apt install snapd sudo snap install core 检查安装正常 sudo snap install hello-world hello-world 安装 certbot sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot 打开 port 80，443 ufw allow 80 ufw allow 443 尤其注意打开 port 80，容易忘记 获取证书。 sudo certbot certonly --nginx -d synapse.matrix.org 接下来按照提示，输入邮箱等信息，成功获取证书会有信息提示。 Saving debug log to &#x2F;var&#x2F;log&#x2F;letsencrypt&#x2F;letsencrypt.logRequesting a certificate for synapse.matrix.org Successfully received certificate.Certificate is saved at: &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;synapse.matrix.org&#x2F;fullchain.pemKey is saved at: &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;synapse.matrix.org&#x2F;privkey.pemThis certificate expires on 2022-07-15.These files will be updated when the certificate renews.Certbot has set up a scheduled task to automatically renew this certificate in the background. If you like Certbot, please consider supporting our work by: Donating to ISRG &#x2F; Let’s Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le 配置NGINX安装 NGINX sudo apt-get install nginx -y 新建并打开 NGINX 配置 sudo nano /etc/nginx/sites-available/synapse.matrix.org.conf 在 synapse.matrix.org.conf 填入配置，配置参考官方说明和别人的教程。 载入新配置 sudo ln -s /etc/nginx/sites-available/synapse.matrix.org.conf /etc/nginx/sites-enabled/ 重启 NGINX 在官方的测试网站，测试 synapse 是否正常运行 如果连接没有问题，会显示 &gt; Checks Success 以及 DNS resultsserver name&#x2F;.well-known result contains explicit port number: no SRV lookup done 注册新用户开始注册新用户 register_new_matrix_user -c /etc/matrix-synapse/homeserver.yaml http://localhost:8008 homeserver.yaml 的地址要写出来，不然会报错 按照提示为新用户增加信息 New user localpart: erikj Password: Confirm password: Make admin [no]: # no / yes Success! 禁止用户自己注册新用户修改 homeserver.yaml enable_registration: false 手动重置用户密码参考 MATRIX - reset password (synapse)，SQLite 和 postgreSQL 有各自的操作 我的数据库是 postgreSQL，首先获得新密码的哈希值 hash_password 进入 postgreSQL su postgres psql 依次输入一些数据库操作 \\connect synapse UPDATE users SET password_hash=&#39;$2a$12$q...sp3m&#39; WHERE name=&#39;@username:synapse.matrix.org&#39;; \\q \\connect synapse 是连接到 synapse 的数据库，这里的 synapse 是 你在 homeserver.yaml 写的数据库名字 password_hash 为上面计算出的新密码哈希值 WHERE name 后面要换成你自己的用户名 配置 turn 语音服务根据官方教程，就可以配置了，但是官方教程没有指出 sudo nano /etc/default/coturn 去除 TURNSERVER_ENABLED=1 的注释 添加管理面板 synapse-admindocker run -d -p 8090:80 awesometechnologies/synapse-admin # 8090 是 synapse-admin 出现的端口号 在设置 reverse-proxy 的时候，需要 access to the following endpoints: /_matrix /_synapse/admin 如果设置没问题，在 synapse-admin 页面输入 Homeserver URL 的时候，应该显示 synpase 服务器的版本号 附录生成需要长度的密钥cat /dev/urandom | tr -dc &#39;a-zA-Z0-9&#39; | fold -w 32 | head -n 1 修改hba_file官网上关于 postgresSQL 需要修改 hba_file 的内容，有说明。如果提示 FATAL: Ident authentication failed for user &quot;synapse_user&quot;，需要更换除了ident 以外的数据库认证方式。 这里说明一下如何找到 hba_file 的位置，进入 psql （需要先进入 postgres 用户） 进入和退出 psql，使用 \\q; 向 postgresSQL 询问 hba_file 的位置 SHOW hba_file； 关于 Hostwinds 更换IP通过工具检测 ip 情况，国内叉国外勾，说明 ip 可能需要换一个了。 如果是 Hostwinds ，可以免费更换 ip 。这时候在中间灰色一栏选择 Manage IP’s ，再点击最右边的 Fix ISP Block 进行一个换 ip 的操作，耐心等待一会再ping。 注意： 选择Fix ISP Block，不要选成Change Main IP了，后面那个换 ip 要加钱 account 信息中 country 必须填写 China，才有这个免费服务 删除package相关查询目前存在的 package 名称和地址 dpkg-statoverride --list 移除 package dpkg-statoverride --remove &lt;path&gt; 可能用到的 NGINX 相关命令sudo nginx -t sudo nginx -s reload # 开启 nginx 之后，修改了配置，只需要用这个命令 sudo systemctl enable nginx sudo systemctl restart nginx sudo systemctl status nginx 可能用到的 synapse 相关命令sudo systemctl enable matrix-synapse sudo systemctl restart matrix-synapse sudo systemctl status matrix-synapse 移除文件的命令注意：rm 是永久移除 sudo rm /etc/nginx/sites-enabled/synapse.matrix.org.conf 退出 &gt; 的方法输入\\q; 一定要有分号 配置和使用 ufw记得要打开port 22，教程 Nano操作 CTRL键 + 6 （或按住 转移 并移动光标）以标记设置并标记您想要的内容。 ALT + 6 用于复制标记的文本。 用Ctrl+Y到上一页，Ctrl+V到下一页 scp命令用 scp 可以实现从当前用户拷贝文件到别的用户。 参考感谢 狐狸 和 chn，对我的网络之旅的帮助。 官方教程[1] https://github.com/matrix-org/synapse/blob/develop/docs/setup/installation.md [2] https://github.com/matrix-org/synapse/blob/develop/docs/postgres.md [3] https://github.com/matrix-org/synapse/blob/develop/docs/reverse_proxy.md 其它[1] https://blog.southfox.me/2022/04/%E6%90%AD%E5%BB%BAMatrix%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1/ [2] https://tech.minnix.dev/projects/build-your-own-matrix-server-behind-your-existing-nginx-reverse-proxy [3] https://www.informaticar.net/install-matrix-synapse-on-ubuntu-20-04/ [4] https://www.atlantic.net/vps-hosting/how-to-install-matrix-synapse-on-ubuntu-20-04/","categories":[],"tags":[{"name":"matrix","slug":"matrix","permalink":"http://blog.sharktale.xyz/tags/matrix/"},{"name":"synapse","slug":"synapse","permalink":"http://blog.sharktale.xyz/tags/synapse/"}]},{"title":"Win|安装 texlive2022 和 texstudio","slug":"Install-texlive2022-and-texstudio","date":"2022-04-08T04:50:36.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"Install-texlive2022-and-texstudio/","link":"","permalink":"http://blog.sharktale.xyz/Install-texlive2022-and-texstudio/","excerpt":"以前有用过 TeXLive2020，现在为了做一个 todolist，加上换了电脑，所以重新安装了 TeXLive 和 TeXStudio","text":"以前有用过 TeXLive2020，现在为了做一个 todolist，加上换了电脑，所以重新安装了 TeXLive 和 TeXStudio 解压缩 texlive2022-20220321.iso，找到并打开tl-tray-menu.exe，在任务栏中找到对应图标，右键选择Command Prompt执行下面的命令： install-tl-windows -repository https://mirrors.tuna.tsinghua.edu.cn/tlpretest/ -gui 选择local repository:选择安装位置，以及是否安装 TexWorks 前端，之后进入安装。这里由于不习惯 TeXworks，所以直接没有安装 TeXworks。完成安装 TeXLive2022，安装 TeXStudio 就是一般软件的安装方法，不需要更多描述。","categories":[],"tags":[{"name":"texlive","slug":"texlive","permalink":"http://blog.sharktale.xyz/tags/texlive/"},{"name":"texstudio","slug":"texstudio","permalink":"http://blog.sharktale.xyz/tags/texstudio/"}]},{"title":"Ubuntu|安装和设置 Apache，NGINX，MySQL，PHP","slug":"first-sight-of-apache-nginx-php-and-mysql","date":"2022-03-31T03:26:20.000Z","updated":"2022-04-01T13:51:56.000Z","comments":true,"path":"first-sight-of-apache-nginx-php-and-mysql/","link":"","permalink":"http://blog.sharktale.xyz/first-sight-of-apache-nginx-php-and-mysql/","excerpt":"其实一般情况下， Apache 和 NGINX 安装一个就好了……总之，这一篇只是我自己的一种记录，请千万不要照着这一篇去做。","text":"其实一般情况下， Apache 和 NGINX 安装一个就好了……总之，这一篇只是我自己的一种记录，请千万不要照着这一篇去做。 Apache 和 NGINX 对比根据NGINX vs Apache – Choosing the Best Web Server in 2022，Apache 和 NGINX 的优缺点主要为： Apache 一次处理一个连接请求，NGINX 可以同时处理多个连接请求。 NGINX 提供静态内容更快，但是需要另外的软件帮助处理动态内容，而 Apache 可以自己提供动态内容。 Apache 提供 .htaccess 文件，可以在不更改主服务器设置，就能改变网站的设置。 性能最好的方法是：把 NGINX 作为反向代理，放在 Apache 前面。 所以，我将先后安装 Apache 和 NGINX。 安装和配置 Apache 在安装NGINX之前，需要先安装并配置好Apache。 很可能你的 VPS 已经安装了 Apache，输入下列命令可以检查是否存在 Apache。 sudo systemctl status apache2 显示 VPS 没有安装 Apache。 自己安装 Apache： sudo apt install apache2 如果 VPS 之前有防火墙，需要为 Apache 新建立一条 rule： sudo ufw allow “Apache Full” 再次检查 Apache 是否存在： sudo systemctl status apache2 输入 q 离开上面的页面 最后，打开一个自己电脑上的浏览器，输入 VPS 的 IP 地址，如果出现下面的页面，就是 Apache 运行好了。 安装 MySQLsudo apt-get install mysql-server 安装过程中，会要求设置 root user 的密码，不要让密码为空白。 如果没有提示设置 root 密码，可以输入 mysql_secure_installation 进行初始密码的设定 检查 MySQL 服务的状态： sudo systemctl status mysql 如果 MySQL 工作正常，会输出： 输入 q 离开上面的页面 安装PHP 可能需要安装 nano 文本编辑器： sudo apt-get install nano 检查 packet 更新： sudo apt-get upgrade 安装 PHP： sudo apt-get install php 测试 PHP 运行状态： ​ 简单的方法是，输入：php -v ​ 复杂一点的方法是： 在 /var/www/html 目录下，新建一个 test.php，并用 nano 打开。这个目录被称为 webroot，是 Apache 查找网页的缺省位置（如果没有被设置从哪里找的话）。 sudo nano /var/www/html/test.php 在新建的文件中，输入之后，按 CTRL + X ，Y 保存后 ENTER 离开。 &lt;?php phpinfo(); ?&gt; 打开浏览器，输入网址来测试 PHP http://&lt;your_vps_ip_adress&gt;/test.php 移除测试文件（一定要移除，否则有安全风险） sudo rm /var/www/html/test.php Ubuntu release 版本升级就是突然想升个级 sudo apt update sudo apt upgrade sudo do-release-upgrade 中间某部分输出： 参考官网文档：Upgrading|Ubuntu 更新好了，允许 reboot 后重新连接，显示： 安装和配置 NGINX安装 NGINXsudo apt-get update sudo apt-get install nginx 为 NGINX 配置 Apachesudo nano（我觉得vim太难用了，可以的话我还要记得删除vim的包） sudo nano /etc/apache2/ports.conf 在第 5 行，把端口号 80 改为 8080. Listen 8080 8000 和 8080 都是 HTTP 协议的备用端口号 在 /etc/apache2/sites-available/ 目录下，创建文件 000-default.conf 和 001-default.conf sudo nano /etc/apache2/sites-available/000-default.conf 确保在 000-default.conf 和 001-default.conf 文件中，配置如下：（把端口改为 8080 ） &lt;VirtualHost *:8080&gt; ServerAdmin webmaster@localhost DocumentRoot /var/www/html ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined &lt;/VirtualHost&gt; Save the file and activate the new configuration file: sudo a2ensite 001-default Then reload Apache: sudo systemctl reload apache2 Install the net-tools package which contains the netstat command: sudo apt install net-tools Verify that Apache is now listening on 8080: sudo netstat -tlpn The output should look like the following example, with apache2 listening on 8080: OutputActive Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1086/sshd tcp6 0 0 :::8080 :::* LISTEN 4678/apache2 tcp6 0 0 :::22 :::* LISTEN 1086/sshd Once you verify that Apache is listening on the correct port, you can configure support for PHP and FastCGI. 设置完成后，按照上面 PHP 安装时候，检查是否正确的方法，查看浏览器网页： &lt;ip 地址&gt;：8080&#x2F;info.php 为 Apache 配置 NGINX关闭 default 的虚拟主机（visual host） sudo unlink /etc/nginx/sites-enabled/default 打开： sudo nano /etc/nginx/nginx.conf 创建新文件： sudo nano /etc/nginx/sites-available/reverse.conf 复制下列配置： 注意：You could try the following two commands to paste from the clipboard. Both of them should work. Ctrl+Shift+v Shift+Insert The Ctrl+U command only allows pasting text that was copied or cut from within nano itself, hence the reason the command is not working. server &#123; listen 80 default_server; index index.php index.html index.htm; location / &#123; proxy_pass http://localhost:8080; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; &#125; &#125; 保存并离开 nano，然后开启虚拟主机配置： sudo ln -s /etc/nginx/sites-available/reverse.conf /etc/nginx/sites-enabled/ 测试 NGINX sudo nginx -t 也可以用这个命令： sudo service nginx configtest 重启 NGINX： sudo systemctl restart nginx 现在，在浏览器中输入 VPS 的 IP 地址，会被反向代理到 Apache 的页面。 参考资料[1] What Is Apache? An In-Depth Overview of Apache Web Server [2] How to Install Laravel on Ubuntu 18.04 with Apache [3] How to Install Linux, Apache, MySQL, PHP (LAMP) stack on Ubuntu 16.04 [4] How to Install PHP on Any Server (Linux, macOS, Windows) [5] How to set up and login as root user in MySQL [6] Upgrading|Ubuntu [7] How to Set Up an Nginx Reverse Proxy [8] How to Set Up Nginx as a Reverse Proxy For Apache on Debian 11 [9] How to Use Nginx to Redirect","categories":[],"tags":[{"name":"VPS","slug":"VPS","permalink":"http://blog.sharktale.xyz/tags/VPS/"},{"name":"Apache","slug":"Apache","permalink":"http://blog.sharktale.xyz/tags/Apache/"},{"name":"NGINX","slug":"NGINX","permalink":"http://blog.sharktale.xyz/tags/NGINX/"},{"name":"MySQL","slug":"MySQL","permalink":"http://blog.sharktale.xyz/tags/MySQL/"},{"name":"PHP","slug":"PHP","permalink":"http://blog.sharktale.xyz/tags/PHP/"},{"name":"reverse","slug":"reverse","permalink":"http://blog.sharktale.xyz/tags/reverse/"}]},{"title":"Hexo|关于 volantis 模板一些注意事项","slug":"notes_for_volantis","date":"2022-03-25T07:20:22.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"notes_for_volantis/","link":"","permalink":"http://blog.sharktale.xyz/notes_for_volantis/","excerpt":"","text":"导航栏设置导航栏相关的页面布局设置归档页面为自动生成，初始化时已经生成。友链，关于等页面都是需要写在source/about/index.md（如果没有需要创建一个）里面。 关于页面In source/about/index.md: --- layout: docs seo_title: 关于 bottom_meta: false sidebar: [] --- 下面写关于自己的内容 分类页面In source/categories/index.md: --- layout: category index: true title: 所有分类 --- 标签页面In source/tags/index.md: --- layout: tag index: true title: 所有标签 --- 友链页面首先，在 source/friends/index.md写入： --- layout: friends # 必须 title: 我的朋友们 # 可选，这是友链页的标题 --- 这里写友链上方的内容。 &lt;!-- more --&gt; 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。 插入友链数据可以 选择布局方案或使用友链标签。这里我选择布局方案。在主题配置文件中找到： pages: # 友链页面配置 friends: layout_scheme: traditional # simple: 简单布局（只有头像和标题）, traditional: 传统布局(Volantis 旧版本的风格) 在/source/_data/friends.yml（如果没有需要创建一个）写入友链数据，内容格式为： - group: # 分组标题 description: # 分组描述 items: - title: # 名称 avatar: # 头像 url: # 链接 screenshot: # 截图 keywords: # 关键词 description: # 描述 - title: # 名称 avatar: # 头像 url: # 链接 screenshot: # 截图 keywords: # 关键词 description: # 描述 不同的布局方式，会用到一部分的字段，一般来说，title、avatar 和 url 都是必须的。这些数据被转成 HTML 标签插入到友链页面的 &lt;!-- more --&gt; 部分。 开启网站的站内搜索search功能，默认由hexo自己产生，需要先执行下面的命令，安装必要插件： $ npm i hexo-generator-json-content 网站图标设置网站图标，需要在博客根目录下的 _config.yml 文件写入： # 网站图标，更多尺寸等图标请使用import方式批量导入 favicon: &lt;your icon url&gt; Others文章页面设置（Front-matter）Front-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说： --- title: Hello World date: 2013/7/13 20:46:25 --- 分类，标签和各个参数值的详细介绍，见Front-matter 和Volantis: 页面配置。这里选取一些我会用到的。 在文章Front-matter之后，插入 &lt;!-- more --&gt;，前面的部分即为摘要。其它的一些常用Front-matter设置如下： --- layout: post # 选择文章页面类型，post(普通文章，可以显示相关文章)，docs(文档，不可显示相关文章)，list(列表) date: # 创建日期 updated: # 更新日期 title: 取个什么标题好呢 # 页面标题 seo_title: 关于 # 网页标题 tags:Hexo #单个标签 tags: # 设置多个标签 - volantis - Hexo pin: true # 置顶在首页 archive: false # 文章不归档 author: Jon # 设置文章作者，其他作者信息需要写在数据文件/source/_data/author.yml top_meta: false # 是否显示meta标签（文章顶部和底部的日期、分类、更新日期、标签、分享等） bottom_meta: false # 如果一个页面没有 title 则不会显示 top_meta ，像404、关于页面就可以完全隐藏 thumbnail: https://img.vim-cn.com/17/0c7b02722686d1527a1df807dae0794d995860.png # 标题右边显示缩略图, 缩略图仅在文章列表和文章页面显示，不会在归档页面显示 cover: true # 显示文章封面 # 标题右边显示图标 icons: [fas fa-fire red, fas fa-star green] 可以通过 red / blue / green / yellow / orange / theme / accent 来设置图标的颜色 comments: false # 关闭评论 # 侧边栏显示与否 sidebar: [] # 不显示 sidebar: [grid, toc, tags] # 放置任何你想要显示的侧边栏部件 --- 配置页面插件（说说，渲染公式，Snackbar页面通知等），见Volantis: 页面配置。 相关文章插件相关文章功能，需要安装插件 (for layout: post)： $ npm i hexo-related-popular-posts 数据统计如果选择不蒜子，取消主题配置文件中的busuanzi注释。 如果选择 leancloud 统计, 你还需前往 leancloud 创建应用并填写下面 leancloud 相关配置。 analytics: busuanzi: #/libs/busuanzi/js/busuanzi.pure.mini.js #https://cdn.jsdelivr.net/gh/volantis-x/cdn-busuanzi@2.3/js/busuanzi.pure.mini.js leancloud: # 请使用自己的 id &amp; key 以防止数据丢失 app_id: # 应用 APP_ID app_key: # 应用 APP_KEY custom_api_server: # 国际版一般不需要写，除非自定义了 API Server 由于我注册 leancloud 的SMS verification出了问题，所以最后选择了不蒜子。 404页面创建source/404.md，写入： --- cover: true robots: noindex,nofollow sitemap: false seo_title: 404 Not Found bottom_meta: false sidebar: [] --- &#123;% p logo center huge, 404 %&#125; &#123;% p center bold, 很抱歉，您访问的页面不存在 %&#125; &#123;% p center small, 可能是输入地址有误或该地址已被删除 %&#125; 参考资料[1] Volantis Team, 页面配置, Volantis.org. （最后一次获取时间：2022-03-25） [2] Volantis Team, 站点配置, Volantis.org. （最后一次获取时间：2022-03-25） [3] Volantis Team, Volantis主题源代码的“_config.yml”文件, GitHub. （最后一次获取时间：2022-03-25） [4] Hexo, Front-matter, hexo.io.（最后一次获取时间：2022-03-25） [5] Volantis Team, 进阶设定, Volantis.org. （最后一次获取时间：2022-03-25）","categories":[],"tags":[{"name":"volantis","slug":"volantis","permalink":"http://blog.sharktale.xyz/tags/volantis/"},{"name":"Hexo","slug":"Hexo","permalink":"http://blog.sharktale.xyz/tags/Hexo/"}]},{"title":"Hexo|blog 建立与使用笔记","slug":"establish-a-blog-with-hexo","date":"2022-03-25T05:58:04.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"establish-a-blog-with-hexo/","link":"","permalink":"http://blog.sharktale.xyz/establish-a-blog-with-hexo/","excerpt":"","text":"建立Hexo blog我在做下面这些之前，对这些都一无所知，过程磕磕绊绊，所以更加想要记录下来。 Hexo与模板的安装开始Hexo之前的一些必要安装 git node.js 配置GitHub Page先写使用GitHub自带的域名的步骤，如果要换成自己的域名，需要多进行一些写在后面的步骤。 使用Hexo blogHexo建议采用2个branch，一个放置博客源代码，一个放置产生的静态文件。所以我的博客仓库有2个分支，blog 分支和 master 分支。 hexo命令： hexo &lt;command&gt; 如果输入不存在的command（比如：hexo -s），会显示出hexo相关命令的帮助。 生成一个名为的，新的markdown文件（位于\\source_posts\\）： hexo new &quot;&lt;filename&gt;&quot; 注意：文章内部不要使用 H1 标题。 编译形成网页（使用http://localhost:4000/访问本地主机，即可看到效果） ： hexo s git命令多看git cheat sheet.pdf，外加多搜索 日常修改与版本控制 将Hexo配置推到remote的branch git add . git commit -m &quot;[descriptive messgage]&quot; git push origin Hexo # 将本地branch的内容全部上传到与之关联的remote branch 说明： $ git add Snapshots the file in preparation for versioning $ git commit -m &quot;&lt;descriptive messgage&gt;&quot; Records file snapshots permanently in version history $ git push upload all local branch commits to GitHub git an open source, distributed version-control system commit a Git object, a snapshot of your entire repository compressed into a SHA 把文章推到master分支 hexo g -d hexo g Generate static files, options: Command Description -b 或者 –bail Raise an error if any unhandled exception is thrown during generation -c 或者 –concurrency Maximum number of files to be generated in parallel. Default is infinity -d 或者 --deploy Deploy after generated -f 或者–force Force regenerate -w 或者–watch Watch file changes 参考资料[1] Barrel Titor, 用 Hexo 和 GitHub Page 搭建静态博客, 知乎. (最后一次获取时间：2022-03-25)","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://blog.sharktale.xyz/tags/Hexo/"},{"name":"git","slug":"git","permalink":"http://blog.sharktale.xyz/tags/git/"}]},{"title":"MATLAB|FFT analyzer结果输出为figure","slug":"convert-fft-analyzer-to-figure","date":"2022-03-21T07:25:42.000Z","updated":"2022-06-21T13:04:17.674Z","comments":true,"path":"convert-fft-analyzer-to-figure/","link":"","permalink":"http://blog.sharktale.xyz/convert-fft-analyzer-to-figure/","excerpt":"在SIMULINK中，Powergui自带的FFT Analysis Tool，运行快速，不易出错，但是不方便直接读取幅值数据。而且，有时候需要展示FFT柱状图。所以，我们希望将 Powergui 中FFT Analysis Tool 产生的FFT数据，保存到workspace，并且输出为figure。","text":"在SIMULINK中，Powergui自带的FFT Analysis Tool，运行快速，不易出错，但是不方便直接读取幅值数据。而且，有时候需要展示FFT柱状图。所以，我们希望将 Powergui 中FFT Analysis Tool 产生的FFT数据，保存到workspace，并且输出为figure。 注意：在每次FFT之前，都需要update FFT Analysis Tool 的数据。 初始化结构体： FFTDATA = power_fftscope(ScopeData); % ScopeData为scope保存数据的变量名，不同的scope有不同的名字 设置结构体的参数（下面3个参数，需要和FFT Analysis Tool的设置一样 ） FFTDATA.cycles = 1; % 进行FFT的周期数 FFTDATA.fundamental = 50; % 基频（Hz） FFTDATA.maxFrequency = 20000; % FFT分析的最大频率 更新结构体数据（依据上一步的三个参数进行更新） FFTDATA = power_fftscope(FFTDATA); 输出FFT的figure power_fftscope(FFTDATA)","categories":[],"tags":[{"name":"MATLAB","slug":"MATLAB","permalink":"http://blog.sharktale.xyz/tags/MATLAB/"},{"name":"SIMULINK","slug":"SIMULINK","permalink":"http://blog.sharktale.xyz/tags/SIMULINK/"},{"name":"Powergui","slug":"Powergui","permalink":"http://blog.sharktale.xyz/tags/Powergui/"},{"name":"FFT","slug":"FFT","permalink":"http://blog.sharktale.xyz/tags/FFT/"}]}],"categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.sharktale.xyz/tags/docker/"},{"name":"docker-compose","slug":"docker-compose","permalink":"http://blog.sharktale.xyz/tags/docker-compose/"},{"name":"Nextcloud","slug":"Nextcloud","permalink":"http://blog.sharktale.xyz/tags/Nextcloud/"},{"name":"download","slug":"download","permalink":"http://blog.sharktale.xyz/tags/download/"},{"name":"IEEE","slug":"IEEE","permalink":"http://blog.sharktale.xyz/tags/IEEE/"},{"name":"MATLAB","slug":"MATLAB","permalink":"http://blog.sharktale.xyz/tags/MATLAB/"},{"name":"VPS","slug":"VPS","permalink":"http://blog.sharktale.xyz/tags/VPS/"},{"name":"PuTTY","slug":"PuTTY","permalink":"http://blog.sharktale.xyz/tags/PuTTY/"},{"name":"Iptables","slug":"Iptables","permalink":"http://blog.sharktale.xyz/tags/Iptables/"},{"name":"RSS","slug":"RSS","permalink":"http://blog.sharktale.xyz/tags/RSS/"},{"name":"Miniflux","slug":"Miniflux","permalink":"http://blog.sharktale.xyz/tags/Miniflux/"},{"name":"Wallabag","slug":"Wallabag","permalink":"http://blog.sharktale.xyz/tags/Wallabag/"},{"name":"WSL","slug":"WSL","permalink":"http://blog.sharktale.xyz/tags/WSL/"},{"name":"Emacs","slug":"Emacs","permalink":"http://blog.sharktale.xyz/tags/Emacs/"},{"name":"Doom Emacs","slug":"Doom-Emacs","permalink":"http://blog.sharktale.xyz/tags/Doom-Emacs/"},{"name":"volantis","slug":"volantis","permalink":"http://blog.sharktale.xyz/tags/volantis/"},{"name":"highlightjs","slug":"highlightjs","permalink":"http://blog.sharktale.xyz/tags/highlightjs/"},{"name":"hexo","slug":"hexo","permalink":"http://blog.sharktale.xyz/tags/hexo/"},{"name":"rime","slug":"rime","permalink":"http://blog.sharktale.xyz/tags/rime/"},{"name":"rimerc","slug":"rimerc","permalink":"http://blog.sharktale.xyz/tags/rimerc/"},{"name":"输入法","slug":"输入法","permalink":"http://blog.sharktale.xyz/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"},{"name":"miniflux","slug":"miniflux","permalink":"http://blog.sharktale.xyz/tags/miniflux/"},{"name":"RSShub","slug":"RSShub","permalink":"http://blog.sharktale.xyz/tags/RSShub/"},{"name":"element","slug":"element","permalink":"http://blog.sharktale.xyz/tags/element/"},{"name":"matrix","slug":"matrix","permalink":"http://blog.sharktale.xyz/tags/matrix/"},{"name":"synapse","slug":"synapse","permalink":"http://blog.sharktale.xyz/tags/synapse/"},{"name":"texlive","slug":"texlive","permalink":"http://blog.sharktale.xyz/tags/texlive/"},{"name":"texstudio","slug":"texstudio","permalink":"http://blog.sharktale.xyz/tags/texstudio/"},{"name":"Apache","slug":"Apache","permalink":"http://blog.sharktale.xyz/tags/Apache/"},{"name":"NGINX","slug":"NGINX","permalink":"http://blog.sharktale.xyz/tags/NGINX/"},{"name":"MySQL","slug":"MySQL","permalink":"http://blog.sharktale.xyz/tags/MySQL/"},{"name":"PHP","slug":"PHP","permalink":"http://blog.sharktale.xyz/tags/PHP/"},{"name":"reverse","slug":"reverse","permalink":"http://blog.sharktale.xyz/tags/reverse/"},{"name":"Hexo","slug":"Hexo","permalink":"http://blog.sharktale.xyz/tags/Hexo/"},{"name":"git","slug":"git","permalink":"http://blog.sharktale.xyz/tags/git/"},{"name":"SIMULINK","slug":"SIMULINK","permalink":"http://blog.sharktale.xyz/tags/SIMULINK/"},{"name":"Powergui","slug":"Powergui","permalink":"http://blog.sharktale.xyz/tags/Powergui/"},{"name":"FFT","slug":"FFT","permalink":"http://blog.sharktale.xyz/tags/FFT/"}]}